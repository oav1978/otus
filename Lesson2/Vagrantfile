Vagrant.configure("2") do |config|
 	config.vm.define "centos" do |subconfig|    
  		subconfig.vm.box = "centos/7"
  		subconfig.vm.hostname="centos"    
  		subconfig.vm.network :private_network, ip: "192.168.55.11"    
  		subconfig.vm.provider "virtualbox" do |vb|      
    			vb.memory = "256"      
    			vb.cpus = "1"    
    			unless File.exist?('./sata1.vdi')
      				vb.customize ['createhd', '--filename', './sata1.vdi', '--size', 500 * 1024]
    			end  
    			vb.customize ["storagectl", :id, "--name", "SATA", "--add", "sata" ]
    			vb.customize ['storageattach', :id, '--storagectl', 'SATA', '--port', 1, '--device', 0, '--type', 'hdd', '--medium',  './sata1.vdi']
  		end
  		$script0 = <<-'SCRIPT'
    			useradd otus
			useradd otus2
			useradd otus3
			cp -r /home/vagrant/.ssh /home/otus/.ssh
			chown otus:otus -R /home/otus/.ssh    
			#yum install -y udisks2 nano
			#yum install -y udisks2 nano
			yum install -y wget udisks2 nano
  		SCRIPT

		$script1 = <<-'SCRIPT'
			cp /home/vagrant/10-udisk2.rules /etc/polkit-1/rules.d/10-udisk2.rules
			cp /home/vagrant/99-udisk2_mount.rules /etc/polkit-1/rules.d/99-udisk2_mount.rules
			cp /home/vagrant/99-networkmanager.rules /etc/polkit-1/rules.d/99-networkmanager.rules
			
			groupadd -r xgrp
			gpasswd -a otus xgrp
  		SCRIPT

		$script2 = <<-'SCRIPT'
			cp /home/vagrant/sshd_config /etc/ssh/sshd_config
 			sed -i '7a\account    required     pam_time.so' /etc/pam.d/sshd
			echo 'sshd;*;otus2;!Al0000-2400' >> /etc/security/time.conf
			systemctl restart sshd
  		SCRIPT

		$script3 = <<-'SCRIPT'
			cd /home/vagrant
			mkdir -p /var/jail/{dev,etc,lib,lib64,usr/bin,bin}
			mknod -m 666 /var/jail/dev/null c 1 3
			cp /etc/ld.so.{cache,conf} /var/jail/etc/
			cp /etc/nsswitch.conf /var/jail/etc/
			cp /etc/hosts /var/jail/etc/
			for ii in ls bash; do cp $(which $ii) /var/jail$(which $ii); done
			pushd /var/jail/bin/
			ln -s bash sh
			popd

			# copy library dependencies for the binaries we just copied
			# to find out what we need, 'ldd' can be used
			# ex: ldd $(which bash)
			#	linux-vdso.so.1 =>  (0x00007ffd4c735000)
			#	libtinfo.so.5 => /lib/x86_64-linux-gnu/libtinfo.so.5 (0x00007fe0cce9c000)
			#	libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007fe0ccc98000)
			#	libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007fe0cc8d3000)
			#	/lib64/ld-linux-x86-64.so.2 (0x00007fe0cd0c5000)

			# to avoid manual copy, the l2chroot script can be used:
			wget -O /usr/local/sbin/l2chroot http://www.cyberciti.biz/files/lighttpd/l2chroot.txt
			chmod 744 /usr/local/sbin/l2chroot

			# Edit l2chroot script and change the BASE="/webroot" variable to BASE="/var/jail"
			sed -i 's@/webroot@/var/jail@' /usr/local/sbin/l2chroot

			for ii in ls bash; do l2chroot $(which $ii); done
			cp /lib64/libnsl.so.1 /var/jail/lib64/
			cp /lib64/libnss_* /var/jail/lib64/

			echo 'Match group sshjailed' >> /etc/ssh/sshd_config
			echo '	ChrootDirectory /var/jail/' >> /etc/ssh/sshd_config
			echo '	X11Forwarding no' >> /etc/ssh/sshd_config
			echo '	AllowTcpForwarding no' >> /etc/ssh/sshd_config
			systemctl restart sshd
			groupadd sshjailed
			gpasswd -a otus3 sshjailed
			mkdir -p /var/jail/home/otus3
			


			#chmod +x chroot_conf.sh
			#sh chroot_conf.sh
  		SCRIPT
		
  		subconfig.vm.provision "shell", inline: $script0
  		config.vm.provision "file", source: "10-udisk2.rules", destination: "/home/vagrant/10-udisk2.rules"
		config.vm.provision "file", source: "99-udisk2_mount.rules", destination: "/home/vagrant/99-udisk2_mount.rules"
		config.vm.provision "file", source: "99-networkmanager.rules", destination: "/home/vagrant/99-networkmanager.rules"
		subconfig.vm.provision "shell", inline: $script1

		config.vm.provision "file", source: "sshd_config", destination: "/home/vagrant/sshd_config"
		
		subconfig.vm.provision "shell", inline: $script2
		subconfig.vm.provision "shell", inline: $script3
		
	end

config.vm.define "ubuntu" do |subconfig|
  subconfig.vm.box = "ubuntu/bionic64"
  subconfig.vm.hostname="ubuntu"
  subconfig.vm.network :private_network, ip: "192.168.55.12"
  subconfig.vm.provider "virtualbox" do |vb|
    vb.memory = "256"
    vb.cpus = "1"
  end

  subconfig.vm.provision "shell", inline: <<-SHELL
		echo '#include <tunables/global>' >> /etc/apparmor.d/usr.sbin.nginx
		echo 'profile docker-nginx flags=(attach_disconnected,mediate_deleted) {' >> /etc/apparmor.d/usr.sbin.nginx
  		echo '#include <abstractions/base>' >> /etc/apparmor.d/usr.sbin.nginx
		echo 'network inet tcp,' >> /etc/apparmor.d/usr.sbin.nginx
  		echo 'network inet udp,' >> /etc/apparmor.d/usr.sbin.nginx
  		echo 'network inet icmp,' >> /etc/apparmor.d/usr.sbin.nginx
		echo 'deny network raw,' >> /etc/apparmor.d/usr.sbin.nginx
		echo 'deny network packet,' >> /etc/apparmor.d/usr.sbin.nginx
		echo 'file,' >> /etc/apparmor.d/usr.sbin.nginx
  		echo 'umount,' >> /etc/apparmor.d/usr.sbin.nginx
		echo 'deny /bin/** wl,' >> /etc/apparmor.d/usr.sbin.nginx
  		echo 'deny /boot/** wl,' >> /etc/apparmor.d/usr.sbin.nginx
  		echo 'deny /dev/** wl,' >> /etc/apparmor.d/usr.sbin.nginx
  		echo 'deny /etc/** wl,' >> /etc/apparmor.d/usr.sbin.nginx
  		echo 'deny /home/** wl,' >> /etc/apparmor.d/usr.sbin.nginx
  		echo 'deny /lib/** wl,' >> /etc/apparmor.d/usr.sbin.nginx
  		echo 'deny /lib64/** wl,' >> /etc/apparmor.d/usr.sbin.nginx
  		echo 'deny /media/** wl,' >> /etc/apparmor.d/usr.sbin.nginx
  		echo 'deny /mnt/** wl,' >> /etc/apparmor.d/usr.sbin.nginx
  		echo 'deny /opt/** wl,' >> /etc/apparmor.d/usr.sbin.nginx
  		echo 'deny /proc/** wl,' >> /etc/apparmor.d/usr.sbin.nginx
  		echo 'deny /root/** wl,' >> /etc/apparmor.d/usr.sbin.nginx
  		echo 'deny /sbin/** wl,' >> /etc/apparmor.d/usr.sbin.nginx
  		echo 'deny /srv/** wl,' >> /etc/apparmor.d/usr.sbin.nginx
  		echo 'deny /tmp/** wl,' >> /etc/apparmor.d/usr.sbin.nginx
  		echo 'deny /sys/** wl,' >> /etc/apparmor.d/usr.sbin.nginx
  		echo 'deny /usr/** wl,' >> /etc/apparmor.d/usr.sbin.nginx
		echo 'audit /** w,' >> /etc/apparmor.d/usr.sbin.nginx
		echo '  /var/run/nginx.pid w,' >> /etc/apparmor.d/usr.sbin.nginx
		echo '  /usr/sbin/nginx ix,' >> /etc/apparmor.d/usr.sbin.nginx
		echo '  deny /bin/dash mrwklx,' >> /etc/apparmor.d/usr.sbin.nginx
  		echo 'deny /bin/sh mrwklx,' >> /etc/apparmor.d/usr.sbin.nginx
  		echo 'deny /usr/bin/top mrwklx,' >> /etc/apparmor.d/usr.sbin.nginx
  		echo 'capability chown,' >> /etc/apparmor.d/usr.sbin.nginx
  		echo 'capability dac_override,' >> /etc/apparmor.d/usr.sbin.nginx
  		echo 'capability setuid,' >> /etc/apparmor.d/usr.sbin.nginx
  		echo 'capability setgid,' >> /etc/apparmor.d/usr.sbin.nginx
  		echo 'capability net_bind_service,' >> /etc/apparmor.d/usr.sbin.nginx
		echo '  deny @{PROC}/* w,   # deny write for all files directly in /proc (not in a subdir)' >> /etc/apparmor.d/usr.sbin.nginx
  		echo '# deny write to files not in /proc/<number>/** or /proc/sys/**' >> /etc/apparmor.d/usr.sbin.nginx
  		echo 'deny @{PROC}/{[^1-9],[^1-9][^0-9],[^1-9s][^0-9y][^0-9s],[^1-9][^0-9][^0-9][^0-9]*}/** w,' >> /etc/apparmor.d/usr.sbin.nginx
  		echo 'deny @{PROC}/sys/[^k]** w,  # deny /proc/sys except /proc/sys/k* (effectively /proc/sys/kernel)' >> /etc/apparmor.d/usr.sbin.nginx
  		echo 'deny @{PROC}/sys/kernel/{?,??,[^s][^h][^m]**} w,  # deny everything except shm* in /proc/sys/kernel/' >> /etc/apparmor.d/usr.sbin.nginx
  		echo 'deny @{PROC}/sysrq-trigger rwklx,' >> /etc/apparmor.d/usr.sbin.nginx
  		echo 'deny @{PROC}/mem rwklx,' >> /etc/apparmor.d/usr.sbin.nginx
  		echo 'deny @{PROC}/kmem rwklx,' >> /etc/apparmor.d/usr.sbin.nginx
  		echo 'deny @{PROC}/kcore rwklx,' >> /etc/apparmor.d/usr.sbin.nginx
		echo '  deny mount,' >> /etc/apparmor.d/usr.sbin.nginx
		echo '  deny /sys/[^f]*/** wklx,' >> /etc/apparmor.d/usr.sbin.nginx
  		echo 'deny /sys/f[^s]*/** wklx,' >> /etc/apparmor.d/usr.sbin.nginx
  		echo 'deny /sys/fs/[^c]*/** wklx,' >> /etc/apparmor.d/usr.sbin.nginx
  		echo 'deny /sys/fs/c[^g]*/** wklx,' >> /etc/apparmor.d/usr.sbin.nginx
  		echo 'deny /sys/fs/cg[^r]*/** wklx,' >> /etc/apparmor.d/usr.sbin.nginx
  		echo 'deny /sys/firmware/** rwklx,' >> /etc/apparmor.d/usr.sbin.nginx
  		echo 'deny /sys/kernel/security/** rwklx,' >> /etc/apparmor.d/usr.sbin.nginx
		echo '}' >> /etc/apparmor.d/usr.sbin.nginx
		apt-get update
		apt-get install -y apparmor-utils
		aa-enforce /etc/apparmor.d/usr.sbin.nginx
	SHELL
	
  end
		

end


